worker_processes auto;
error_log logs/error.log info;

events {
    worker_connections 1024;
}
http {
    default_type application/octet-stream;
    access_log logs/access.log;
    log_format combined2 '$remote_addr - $remote_user [$time_local] $upstream_response_time $request_time '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';
    lua_package_path 'F:/develop/openresty-1.19.3.1-win64/openResty/?.lua;;';
    lua_shared_dict cb_dict 10m;
    init_by_lua_block {
        local CircuitBreaker = require "cb.CircuitBreaker"
        local cb = CircuitBreaker()
        cb_context = {breaker, cb}
    }

upstream your_backend {
    server 127.0.0.1:8080;
    ngx.var
}

server {
    listen 8081;
    server_name localhost;
    default_type text/html;
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /test {
        #             content_by_lua_file openResty/hello.lua;
        proxy_pass http://your_backend/hello;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        access_by_lua_block {
            local breaker = cb_context.breaker
            print("=========before request:===========\n")
            print(breaker)
            ngx.log(ngx.INFO, "access_by_lua_block")
            if breaker:try_pass() then
                ngx.log(ngx.INFO, "success pass!")
            else
                ngx.log(ngx.INFO, "block pass!")
                ngx.exit(403)
            end

        }

        log_by_lua_block {
            local breaker = cb_context.breaker
            ngx.log(ngx.INFO, "upstream status: ", ngx.var.upstream_status)
            local res = "200" == ngx.var.upstream_status
            breaker:after_request_complete(res)
            print("=========after request:===========\n")
            print(breaker)

        }
    }
}
}