worker_processes auto;
error_log logs/error.log info;

events {
    worker_connections 1024;
}
http {
    default_type application/octet-stream;
    access_log logs/access.log;
    log_format combined2 '$remote_addr - $remote_user [$time_local] $upstream_response_time $request_time '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';
    lua_package_path 'F:/develop/openresty-1.19.3.1-win64/openResty/?.lua;;';
    lua_shared_dict cb_dict 10m;
    init_by_lua_block {
        ngx.log(ngx.INFO, "chu shi hua...")
        local PluginManager = require "plugin.PluginManager"
        PluginManager.init()
        PluginManager.init_work()
        plugin_context = {plugin_manager = PluginManager}

    }

upstream your_backend {
    server 127.0.0.1:8080;
}

server {
    listen 8081;
    server_name localhost;
    default_type text/html;
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location /test {
        #             content_by_lua_file openResty/hello.lua;
        proxy_pass http://your_backend/hello;
#         proxy_pass http://baidu.com;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

         rewrite_by_lua_block {
              ngx.log(ngx.INFO, "rewrite========...")
         }

        access_by_lua_block {
            local plugin_manager = plugin_context.plugin_manager
            plugin_manager.access()
        }

        header_filter_by_lua_block {
           -- 自定义响应头处理逻辑
           ngx.header["X-Custom-Header"] = "Custom Value"
        }
         body_filter_by_lua_block {
            ngx.log(ngx.INFO, "body_filter=========...")
                -- 自定义响应体处理逻辑
                -- ngx.arg[1] = ngx.arg[1] .. " Modified"
                -- print(string.format("ngx.arg[0]: [ %s ], ngx.arg[1]: [ %s ], ngx.arg[2]: [ %s ]", ngx.arg[0], ngx.arg[1], ngx.arg[2]))


         }

        log_by_lua_block {
            local plugin_manager = plugin_context.plugin_manager
            plugin_manager.log()
        }
    }
}
}